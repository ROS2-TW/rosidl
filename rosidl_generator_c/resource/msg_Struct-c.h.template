@###############################################
@#
@# ROS message struct code generation for C
@#
@# EmPy template for generating <msg>-c.h files
@#
@###############################################
@# Start of Template
@#
@# Context:
@#  - spec (rosidl_parser.MessageSpecification)
@#    Parsed specification of the .msg file
@###############################################
@{
from rosidl_generator_c import msg_type_to_c
from rosidl_generator_c import MSG_TYPE_TO_C

c_namespace = '%s_' % (spec.base_type.pkg_name)
c_struct = '%s' % spec.base_type.type
c_full_name = '%s%s' % (c_namespace, c_struct)
}@
#ifndef @(spec.base_type.pkg_name.upper())_@(c_full_name.upper())_STRUCT_H_
#define @(spec.base_type.pkg_name.upper())_@(c_full_name.upper())_STRUCT_H_

@##############################
@# Generic Includes
@##############################
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

@##############################
@# Includes for dependencies
@##############################
#include <rosidl_generator_c/arrays.h>
@{
# Include headers of non-primitive field types
for field in spec.fields:
    pkg_name, type = field.type.pkg_name, field.type.type
    if not field.type.is_primitive_type():
        print("#include <%s/%s-c.h>" % (pkg_name, type))
}@

@{
# Call out macro to generate static array types
for field in spec.fields:
    if field.type.is_array and field.type.array_size is not None:
        print("/* Structs for static arrays(containing message, field name, C type, size) */")
        break
for field in spec.fields:
    if field.type.is_array and field.type.array_size is not None:
        print("ROSIDL_GENERATE_STATIC_ARRAY(%s, %s, %s, %s);" %
              (c_full_name, field.name, MSG_TYPE_TO_C[field.type.type], field.type.array_size))
}@

typedef struct @(c_full_name)
{@[for field in spec.fields]
  @(msg_type_to_c(field.type, field.name, c_full_name));
@[end for]
} @(c_full_name);
@# Constants
@[for constant in spec.constants]@
@[if (constant.primitive_type in ['byte', 'int8', 'int16', 'int32', 'int64', 'char'])]@
enum
{
  @(c_full_name + "_" + constant.name) = @(int(constant.value))
};
@[elif (constant.primitive_type in ['uint8', 'uint16', 'uint32', 'uint64'])]@
enum
{
  @(c_full_name + "_" + constant.name) = @(int(constant.value))u
};
@[else]@
static const @(MSG_TYPE_TO_C[constant.primitive_type]) @(c_full_name + "_" + constant.name) = @(constant.value);
@[end if]@
@[end for]@
@# Array and DynamicArray structs
ROSIDL_GENERATE_ARRAY(@(c_full_name), @(c_full_name));

#endif  // @(spec.base_type.pkg_name.upper())_@(c_full_name.upper())_STRUCT_H_
