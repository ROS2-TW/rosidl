import @(spec.base_type.pkg_name)_@(spec.base_type.type)_c
@{
import_modules = set()
}@
@[for field in spec.fields]
@[if not field.type.is_primitive_type()]
@{
import_modules.add('%s.%s' % (field.type.pkg_name, field.type.type))
}@
@[end if]
@[end for]
@[for import_module in import_modules]
import @import_module
@[end for]

class @(spec.base_type.type):

    def __init__(self, handle=None):
        if handle is None:
            self.__obj_handle = @(spec.base_type.pkg_name)_@(spec.base_type.type)_c.create()
        else:
            self.__obj_handle = handle

    @@property
    def _handle(self):
        return self.__obj_handle

    @@_handle.setter
    def _handle(self, handle):
        self.__obj_handle = handle

@[for field in spec.fields]
    @@property
    def @(field.name)(self):
@[if field.type.is_primitive_type()]
        return @(spec.base_type.pkg_name)_@(spec.base_type.type)_c.get_@(field.name)(self.__obj_handle)
@[else]
        msg = @(field.type.pkg_name).@(field.type.type).@(field.type.type)()
        msg._handle = @(spec.base_type.pkg_name)_@(spec.base_type.type)_c.get_@(field.name)(self.__obj_handle)
        return msg
@[end if]

    @@@(field.name).setter
    def @(field.name)(self, value):
@[if field.type.is_primitive_type()]
        @(spec.base_type.pkg_name)_@(spec.base_type.type)_c.set_@(field.name)(self.__obj_handle, value)
@[else]
        @(spec.base_type.pkg_name)_@(spec.base_type.type)_c.set_@(field.name)(self.__obj_handle, value._handle)

@[end if]
@[end for]
