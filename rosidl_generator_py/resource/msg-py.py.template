import @(spec.base_type.pkg_name)_@(spec.base_type.type)_c
@{
import_modules = set()
}@
@[for field in spec.fields]
@[if not field.type.is_primitive_type()]
@{
import_modules.add('%s.%s' % (field.type.pkg_name, field.type.type))
}@
@[end if]
@[end for]
@[for import_module in import_modules]
import @import_module
@[end for]

class @(spec.base_type.type):

    __slots__ = [ @(', '.join(["'%s'" % field.name for field in spec.fields])) ]

    def __init__(self, @(', '.join(["%s=None" % field.name for field in spec.fields]))):
@[for field in spec.fields]
        self.@(field.name) = @(field.name)
@[end for]

    def materialize(self):
        handle = @(spec.base_type.pkg_name)_@(spec.base_type.type)_c.create()
@[for field in spec.fields]
        if self.@(field.name):
@[if field.type.is_primitive_type()]
            @(spec.base_type.pkg_name)_@(spec.base_type.type)_c.set_@(field.name)(handle, self.@(field.name))
@[else]
            @(spec.base_type.pkg_name)_@(spec.base_type.type)_c.set_@(field.name)(handle, self.@(field.name).materialize())
@[end if]
@[end for]
        return handle

    @@classmethod
    def load(cls, handle):
        msg = cls()
@[for field in spec.fields]
@[if field.type.is_primitive_type()]
        msg.@(field.name) = @(spec.base_type.pkg_name)_@(spec.base_type.type)_c.get_@(field.name)(handle)
@[else]
        @(field.name)_handle = @(spec.base_type.pkg_name)_@(spec.base_type.type)_c.get_@(field.name)(handle)
        msg.@(field.name) = @(field.type.pkg_name).@(field.type.type).@(field.type.type).load(@(field.name)_handle)
@[end if]
@[end for]
        return msg
