#include <ruby.h>

#include "@(spec.base_type.pkg_name)/@(spec.base_type.type)-c.h"

@{
from rosidl_generator_rb import msg_type_to_rb
from rosidl_generator_rb import msg_type_to_rb_convert
from rosidl_generator_rb import rb_to_c
}@

VALUE C_@(spec.base_type.pkg_name)_@(spec.base_type.type)_c;

@[for field in spec.fields]
@[if not field.type.is_primitive_type()]
VALUE C_@(field.type.pkg_name)_@(field.type.type)_c;
@[end if]
@[end for]

VALUE @(spec.base_type.pkg_name)_@(spec.base_type.type)_create(VALUE class) {
    return Data_Wrap_Struct(
        class, NULL,
        ruby_xfree,
        ruby_xmalloc(sizeof(@(spec.base_type.pkg_name)_@(spec.base_type.type))));
}

@[for field in spec.fields]
VALUE @(spec.base_type.pkg_name)_@(spec.base_type.type)_set_@(field.name)(
    VALUE self, VALUE value) {

    @(spec.base_type.pkg_name)_@(spec.base_type.type) * cobj;
    Data_Get_Struct(
        self, @(spec.base_type.pkg_name)_@(spec.base_type.type), cobj);

    @[if field.type.is_primitive_type()]
    @(msg_type_to_rb(field.type, "cvalue"));
    cvalue = @(rb_to_c(field.type))(value);
    cobj->@(field.name) = cvalue;
    @[else]
    @(field.type.pkg_name)_@(field.type.type) * cvalue;

    Data_Get_Struct(
        value, @(field.type.pkg_name)_@(field.type.type), cvalue);

    cobj->@(field.name) = *cvalue;
    @[end if]

    return Qnil;
}

VALUE @(spec.base_type.pkg_name)_@(spec.base_type.type)_get_@(field.name)(
    VALUE self) {

    @(spec.base_type.pkg_name)_@(spec.base_type.type) * cobj;
    Data_Get_Struct(
        self, @(spec.base_type.pkg_name)_@(spec.base_type.type), cobj);

    @[if field.type.is_primitive_type()]
    VALUE ret = @(msg_type_to_rb_convert(field.type))(cobj->@(field.name));
    @[else]
    /* Replace second NULL with destructor */
    VALUE ret = Data_Wrap_Struct(
        C_@(field.type.pkg_name)_@(field.type.type)_c, NULL, NULL, &(cobj->@(field.name)));
    @[end if]

    return ret;
}
@[end for]

void Init_@(spec.base_type.pkg_name)_@(spec.base_type.type)_c(void)
{
  C_@(spec.base_type.pkg_name)_@(spec.base_type.type)_c = rb_define_class(
      "C_@(spec.base_type.pkg_name)_@(spec.base_type.type)_c", rb_cObject);

  rb_define_singleton_method(
      C_@(spec.base_type.pkg_name)_@(spec.base_type.type)_c,
      "create", @(spec.base_type.pkg_name)_@(spec.base_type.type)_create, 0);

@[for field in spec.fields]
  rb_define_method(
      C_@(spec.base_type.pkg_name)_@(spec.base_type.type)_c,
      "set_@(field.name)",
      @(spec.base_type.pkg_name)_@(spec.base_type.type)_set_@(field.name), 1);
  rb_define_method(
      C_@(spec.base_type.pkg_name)_@(spec.base_type.type)_c,
      "get_@(field.name)",
      @(spec.base_type.pkg_name)_@(spec.base_type.type)_get_@(field.name), 0);

@[if not field.type.is_primitive_type()]
  C_@(field.type.pkg_name)_@(field.type.type)_c = rb_define_class(
      "C_@(field.type.pkg_name)_@(field.type.type)_c", rb_cObject);
@[end if]
@[end for]
}
