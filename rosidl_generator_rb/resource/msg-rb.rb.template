require '@(spec.base_type.pkg_name)_@(spec.base_type.type)_c'
@{
import_modules = set()
}@
@[for field in spec.fields]
@[if not field.type.is_primitive_type()]
@{
import_modules.add('%s/%s' % (field.type.pkg_name, field.type.type))
}@
@[end if]
@[end for]
@[for import_module in import_modules]
require '@import_module'
@[end for]

module @(spec.base_type.pkg_name.upper())

  class @(spec.base_type.type)

    def initialize(@(', '.join(["%s=nil" % field.name for field in spec.fields])))
@[for field in spec.fields]
      @@@(field.name) = @(field.name)
@[end for]
    end

@[for field in spec.fields]
    def @(field.name)=(value)
      @@@(field.name) = value
    end
    def @(field.name)
      @@@(field.name)
    end
@[end for]

    def materialize()
      handle = C_@(spec.base_type.pkg_name)_@(spec.base_type.type)_c.create()
@[for field in spec.fields]
@[if field.type.is_primitive_type()]
      handle.set_@(field.name)(@@@(field.name))
@[else]
      handle.set_@(field.name)(@@@(field.name).materialize())
@[end if]
@[end for]
      return handle
    end

    def self.load(handle)
      msg = self.new()
@[for field in spec.fields]
@[if field.type.is_primitive_type()]
      msg.@(field.name) = handle.get_@(field.name)()
@[else]
      @(field.name)_handle = handle.get_@(field.name)()
      msg.@(field.name) = @(field.type.pkg_name.upper())::@(field.type.type).load(@(field.name)_handle)
@[end if]
@[end for]
      return msg
    end
  end
end
